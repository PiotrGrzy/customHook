{"version":3,"sources":["actions/index.js","actions/types.js","components/CommentBox.js","components/customHooks.js","components/CommentItem.js","components/CommentList.js","components/App.js","reducers/index.js","reducers/comments.js","Root.js","index.js"],"names":["removeComment","comment","type","payload","sortComments","CommentBox","state","handleChange","e","setState","target","value","handleSubmit","preventDefault","props","saveComment","onSubmit","this","onChange","React","Component","connect","useSomeActions","actionsAsArray","dispatch","useDispatch","useMemo","map","action","bindActionCreators","CommentItem","item","remove","onClick","comments","sort","i","key","App","combineReducers","filter","newComments","store","createStore","reducers","children","ReactDOM","render","Root","document","querySelector"],"mappings":"+OAMaA,EAAgB,SAACC,GAC5B,MAAO,CAAEC,KCNmB,iBDMGC,QAASF,IAG7BG,EAAe,WAC1B,MAAO,CAAEF,KCTkB,kBCEvBG,E,4MACJC,MAAQ,CAAEL,QAAS,I,EAEnBM,aAAe,SAACC,GACd,EAAKC,SAAS,CAAER,QAASO,EAAEE,OAAOC,S,EAGpCC,aAAe,SAACJ,GACdA,EAAEK,iBACF,EAAKC,MAAMC,YAAY,EAAKT,MAAML,SAClC,EAAKQ,SAAS,CAAER,QAAS,M,uDAGzB,OACE,0BAAMe,SAAUC,KAAKL,cACnB,6CACA,8BAAUD,MAAOM,KAAKX,MAAML,QAASiB,SAAUD,KAAKV,eACpD,6BACE,wD,GAlBeY,IAAMC,WAyBhBC,cAAQ,KAAM,CAAEN,YF3BJ,SAACd,GAC1B,MAAO,CAAEC,KCHiB,eDGGC,QAASF,KE0BzBoB,CAA+BhB,G,cCf/BiB,EAPQ,SAACC,GACtB,IAAMC,EAAWC,cACjB,OAAOC,mBACL,kBAAMH,EAAeI,KAAI,SAACC,GAAD,OAAYC,YAAmBD,EAAQJ,QAChE,CAACA,KCEUM,MATf,YAAgC,IAATC,EAAQ,EAARA,KAAQ,EACZT,EAAe,CAACtB,IAA1BgC,EADsB,oBAE7B,OACE,6BACE,wBAAIC,QAAS,kBAAMD,EAAOD,KAAQA,EAAlC,4BCcN,IAIeV,eAJS,SAACf,GACvB,MAAO,CAAE4B,SAAU5B,EAAM4B,YAGZb,EApBf,YAAoC,IAAba,EAAY,EAAZA,SAAY,EAClBZ,EAAe,CAAClB,IAAxB+B,EAD0B,oBAGjC,OACE,6BACE,4CACA,4BACGD,EAASP,KAAI,SAAC1B,EAASmC,GAAV,OACZ,kBAAC,EAAD,CAAaL,KAAM9B,EAASoC,IAAKD,QAGrC,4BAAQH,QAASE,GAAjB,YCJSG,MATf,WACE,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,Q,QCLSC,cAAgB,CAC7BL,SCFa,WAGZ,IAFD5B,EAEA,uDAFQ,CAAC,YAAa,YAAa,aACnCsB,EACA,uCACA,OAAQA,EAAO1B,MACb,IPPwB,eOQtB,MAAM,GAAN,mBAAWI,GAAX,CAAkBsB,EAAOzB,UAC3B,IPR0B,iBOSxB,OAAOG,EAAMkC,QAAO,SAACvC,GAAD,OAAaA,IAAY2B,EAAOzB,WACtD,IPTyB,gBOUvB,IAAMsC,EAAc,YAAInC,GAAO6B,OAC/B,OAAOM,EACT,QACE,OAAOnC,MCTE,WAACQ,GACd,OAAO,kBAAC,IAAD,CAAU4B,MAAOC,YAAYC,IAAY9B,EAAM+B,WCFxDC,IAASC,OACP,kBAACC,EAAD,KACE,kBAAC,EAAD,OAEFC,SAASC,cAAc,Y","file":"static/js/main.bf1a2c11.chunk.js","sourcesContent":["import { SAVE_COMMENT, REMOVE_COMMENT, SORT_COMMENTS } from 'actions/types';\r\n\r\nexport const saveComment = (comment) => {\r\n  return { type: SAVE_COMMENT, payload: comment };\r\n};\r\n\r\nexport const removeComment = (comment) => {\r\n  return { type: REMOVE_COMMENT, payload: comment };\r\n};\r\n\r\nexport const sortComments = () => {\r\n  return { type: SORT_COMMENTS };\r\n};\r\n","export const SAVE_COMMENT = 'SAVE_COMMENT';\r\nexport const REMOVE_COMMENT = 'REMOVE_COMMENT';\r\nexport const SORT_COMMENTS = 'SORT_COMMENTS';\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { saveComment } from 'actions';\r\n\r\nclass CommentBox extends React.Component {\r\n  state = { comment: '' };\r\n\r\n  handleChange = (e) => {\r\n    this.setState({ comment: e.target.value });\r\n  };\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    this.props.saveComment(this.state.comment);\r\n    this.setState({ comment: '' });\r\n  };\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.handleSubmit}>\r\n        <h4>Add a Comment</h4>\r\n        <textarea value={this.state.comment} onChange={this.handleChange} />\r\n        <div>\r\n          <button>Submit Comment</button>\r\n        </div>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(null, { saveComment })(CommentBox);\r\n","import { useMemo } from 'react';\r\nimport { bindActionCreators } from 'redux';\r\nimport { useDispatch } from 'react-redux';\r\n\r\n// ten hook łączy niektóre akcje z danego reducera, tak aby dało się je wywołać w danym komponencie\r\n// poznaj jak to działa - https://github.com/Przemocny/zbior-zadan-html-css-js-react/tree/master/FREE%20CODE/REDUX\r\n\r\nconst useSomeActions = (actionsAsArray) => {\r\n  const dispatch = useDispatch();\r\n  return useMemo(\r\n    () => actionsAsArray.map((action) => bindActionCreators(action, dispatch)),\r\n    [dispatch]\r\n  );\r\n};\r\nexport default useSomeActions;\r\n// przetestuj\r\n// - czy po użyciu hooka oraz dowolnej akcji w komponencie store zostanie zmieniowy wg użytej akcji\r\n","import React from 'react';\r\nimport { removeComment } from 'actions';\r\nimport useSomeActions from 'components/customHooks';\r\n\r\nfunction CommentItem({ item }) {\r\n  const [remove] = useSomeActions([removeComment]);\r\n  return (\r\n    <div>\r\n      <li onClick={() => remove(item)}>{item} click on me to remove</li>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CommentItem;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { sortComments } from 'actions';\r\nimport useSomeActions from 'components/customHooks';\r\nimport CommentItem from './CommentItem';\r\n\r\nfunction CommentList({ comments }) {\r\n  const [sort] = useSomeActions([sortComments]);\r\n\r\n  return (\r\n    <div>\r\n      <h3>Comment List</h3>\r\n      <ul>\r\n        {comments.map((comment, i) => (\r\n          <CommentItem item={comment} key={i} />\r\n        ))}\r\n      </ul>\r\n      <button onClick={sort}>SORT</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return { comments: state.comments };\r\n};\r\n\r\nexport default connect(mapStateToProps)(CommentList);\r\n","import React from 'react';\r\nimport CommentBox from 'components/CommentBox';\r\nimport CommentList from 'components/CommentList';\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <CommentBox />\r\n      <CommentList />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { combineReducers } from 'redux';\r\nimport commentsReducer from './comments';\r\n\r\nexport default combineReducers({\r\n  comments: commentsReducer,\r\n});\r\n","import { SAVE_COMMENT, REMOVE_COMMENT, SORT_COMMENTS } from 'actions/types';\r\n\r\nexport default function (\r\n  state = ['comment 1', 'comment 2', 'comment 3'],\r\n  action\r\n) {\r\n  switch (action.type) {\r\n    case SAVE_COMMENT:\r\n      return [...state, action.payload];\r\n    case REMOVE_COMMENT:\r\n      return state.filter((comment) => comment !== action.payload);\r\n    case SORT_COMMENTS:\r\n      const newComments = [...state].sort();\r\n      return newComments;\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\nimport { createStore } from 'redux';\r\nimport { Provider } from 'react-redux';\r\nimport reducers from 'reducers';\r\n\r\nexport default (props) => {\r\n  return <Provider store={createStore(reducers)}>{props.children}</Provider>;\r\n};\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App';\r\nimport Root from 'Root';\r\n\r\nReactDOM.render(\r\n  <Root>\r\n    <App />\r\n  </Root>,\r\n  document.querySelector('#root')\r\n);\r\n"],"sourceRoot":""}